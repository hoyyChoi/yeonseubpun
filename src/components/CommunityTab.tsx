
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Progress } from "@/components/ui/progress";
import {
  TrendingUp,
  Users,
  Star,
  Target,
  Trophy,
  MessageCircle,
  ThumbsUp,
  ThumbsDown,
  Send,
  Crown,
  Medal,
  Award,
  Plus,
  Calendar,
  BarChart3,
  Zap,
  Clock,
  Activity
} from "lucide-react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";

interface CommunityTabProps {
  onBack?: () => void;
  searchQuery?: string;
}

const CommunityTab = ({ onBack, searchQuery = "" }: CommunityTabProps) => {
  const [newComment, setNewComment] = useState("");
  const [selectedDiscussion, setSelectedDiscussion] = useState(null);

  // Ïä§ÌÑ∞Îîî Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞
  const myGroups = [
    {
      id: '1',
      name: 'ÌîÑÎ°†Ìä∏ÏóîÎìú ÎßàÏä§ÌÑ∞Ï¶à',
      members: 12,
      weeklyGoal: 5,
      myProgress: 4,
      groupProgress: 65,
      rank: 2,
      badge: 'ü•à',
      category: 'Frontend'
    },
    {
      id: '2', 
      name: 'JavaScript ÍπäÏù¥ÌååÍ∏∞',
      members: 8,
      weeklyGoal: 3,
      myProgress: 3,
      groupProgress: 80,
      rank: 1,
      badge: 'ü•á',
      category: 'JavaScript'
    }
  ];

  const availableGroups = [
    {
      id: '3',
      name: 'React Ïã§Î¨¥ÏßÑÎì§',
      members: 25,
      weeklyGoal: 7,
      averageScore: 85,
      category: 'React',
      isPrivate: false
    },
    {
      id: '4',
      name: 'Î∞±ÏóîÎìú Í∞úÎ∞úÏûê Î™®ÏûÑ',
      members: 18,
      weeklyGoal: 5,
      averageScore: 78,
      category: 'Backend',
      isPrivate: true
    }
  ];

  // Ïã§ÏãúÍ∞Ñ Í≤ΩÏüÅ Îç∞Ïù¥ÌÑ∞
  const liveCompetition = [
    { name: 'ÌîÑÎ°†Ìä∏ÏóîÎìú ÎßàÏä§ÌÑ∞Ï¶à', score: 2840, members: 12, badge: 'ü•á', trend: '+120' },
    { name: 'JavaScript ÍπäÏù¥ÌååÍ∏∞', score: 2650, members: 8, badge: 'ü•à', trend: '+85' },
    { name: 'Î∞±ÏóîÎìú Í∞úÎ∞úÏûê Î™®ÏûÑ', score: 2340, members: 15, badge: 'ü•â', trend: '+67' }
  ];

  const personalRanking = [
    { name: 'ÍπÄÍ∞úÎ∞ú', score: 420, problems: 28, badge: 'üëë', rank: 1, level: 'Í≥®Îìú' },
    { name: 'Î∞ïÏΩîÎî©', score: 385, problems: 25, badge: 'ü•à', rank: 2, level: 'Ïã§Î≤Ñ' },
    { name: 'Ïù¥ÌîÑÎ°†Ìä∏', score: 350, problems: 23, badge: 'ü•â', rank: 3, level: 'Ïã§Î≤Ñ' },
    { name: 'ÎÇò', score: 320, problems: 21, badge: '', rank: 4, level: 'Î∏åÎ°†Ï¶à' }
  ];

  // ÌÜ†Î°† Îç∞Ïù¥ÌÑ∞
  const discussions = [
    {
      id: 1,
      question: "JavaScript ÌÅ¥Î°úÏ†ÄÏùò ÎèôÏûë ÏõêÎ¶¨",
      content: "ÌÅ¥Î°úÏ†ÄÍ∞Ä Î©îÎ™®Î¶¨Ïóê Ïñ¥ÎñªÍ≤å Ï†ÄÏû•ÎêòÎäîÏßÄ Í∂ÅÍ∏àÌï©ÎãàÎã§. Ïã§Ìñâ Ïª®ÌÖçÏä§Ìä∏ÏôÄÏùò Í¥ÄÍ≥ÑÎäî?",
      author: "Í∞úÎ∞úÏûêÍπÄÏî®",
      time: "2ÏãúÍ∞Ñ Ï†Ñ",
      likes: 12,
      dislikes: 2,
      category: "JavaScript",
      difficulty: "Ïñ¥Î†§ÏõÄ",
      problemId: "js-closure-001",
      comments: [
        {
          author: "ÏΩîÎî©ÎßàÏä§ÌÑ∞",
          content: "Î†âÏãúÏª¨ ÌôòÍ≤ΩÏóêÏÑú Ïô∏Î∂Ä Î≥ÄÏàò Ï∞∏Ï°∞Í∞Ä Ïú†ÏßÄÎêòÎäî Î©îÏª§ÎãàÏ¶òÏù¥ÏóêÏöî!",
          time: "1ÏãúÍ∞Ñ Ï†Ñ",
        }
      ],
    },
    {
      id: 2,
      question: "HTTP/HTTPS Î≥¥Ïïà Ï∞®Ïù¥Ï†ê",
      content: "SSL/TLS Ïù∏Ï¶ùÏÑú ÎèôÏûë Í≥ºÏ†ïÏù¥ Î≥µÏû°Ìï¥ÏÑú Ïù¥Ìï¥Í∞Ä Ïñ¥Î†§ÏõåÏöî.",
      author: "Ïã†ÏûÖÍ∞úÎ∞úÏûê",
      time: "4ÏãúÍ∞Ñ Ï†Ñ",
      likes: 8,
      dislikes: 0,
      category: "ÎÑ§Ìä∏ÏõåÌÅ¨",
      difficulty: "Î≥¥ÌÜµ",
      problemId: "network-https-001",
      comments: [
        {
          author: "Î≥¥ÏïàÏ†ÑÎ¨∏Í∞Ä",
          content: "ÎåÄÏπ≠ÌÇ§ÏôÄ ÎπÑÎåÄÏπ≠ÌÇ§Ïùò Ï°∞Ìï©ÏúºÎ°ú ÎèôÏûëÌï©ÎãàÎã§!",
          time: "3ÏãúÍ∞Ñ Ï†Ñ",
        }
      ],
    }
  ];

  const handleSolveProblem = (problemId: string) => {
    console.log(`Î¨∏Ï†ú ÌíÄÍ∏∞: ${problemId}`);
  };

  const handleCommentSubmit = (discussionId: number) => {
    if (newComment.trim()) {
      console.log(`ÎåìÍ∏Ä Ï∂îÍ∞Ä: ${newComment} to discussion ${discussionId}`);
      setNewComment("");
    }
  };

  const handleViewOtherSolutions = (problemId: string) => {
    console.log(`Îã§Î•∏ ÌíÄÏù¥ Î≥¥Í∏∞: ${problemId}`);
  };

  return (
    <div className='min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800'>
      <div className='container mx-auto px-4 sm:px-6 py-8'>
        <div className='max-w-6xl mx-auto'>
          <div className='mb-8'>
            <h1 className='text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white mb-2'>Ïª§ÎÆ§ÎãàÌã∞</h1>
            <p className='text-gray-600 dark:text-gray-300'>Ìï®Íªò ÏÑ±Ïû•ÌïòÍ≥†, ÏÑúÎ°ú ÎèÑÏö∞Î©∞ Ïã§Î†•ÏùÑ Ìñ•ÏÉÅÏãúÏºúÏöî</p>
          </div>

          <Tabs defaultValue='discussions' className='w-full'>
            <TabsList className='grid w-full grid-cols-5 mb-8'>
              <TabsTrigger value='discussions'>ÌÜ†Î°†</TabsTrigger>
              <TabsTrigger value='study'>Ïä§ÌÑ∞Îîî</TabsTrigger>
              <TabsTrigger value='live-competition'>Ïã§ÏãúÍ∞Ñ Í≤ΩÏüÅ</TabsTrigger>
              <TabsTrigger value='ranking'>Ï†ÑÏ≤¥ Îû≠ÌÇπ</TabsTrigger>
              <TabsTrigger value='wrong-answers'>ÌãÄÎ¶∞ Î¨∏Ï†ú</TabsTrigger>
            </TabsList>

            <TabsContent value='discussions' className='space-y-6'>
              <Card className='border-0 shadow-sm dark:bg-slate-800'>
                <CardHeader>
                  <CardTitle className='flex items-center dark:text-white'>
                    <MessageCircle className='w-5 h-5 mr-2 text-blue-500' />
                    Î¨∏Ï†ú ÌÜ†Î°† ({discussions.length}Í∞ú)
                  </CardTitle>
                  <p className='text-sm text-gray-600 dark:text-gray-300'>
                    Ïñ¥Î†§Ïö¥ Î¨∏Ï†úÏóê ÎåÄÌï¥ Ìï®Íªò Ïù¥ÏïºÍ∏∞Ìï¥Î≥¥ÏÑ∏Ïöî
                  </p>
                </CardHeader>
                <CardContent>
                  <div className='space-y-6'>
                    {discussions.map((discussion) => (
                      <div
                        key={discussion.id}
                        className='border border-gray-200 dark:border-slate-600 rounded-lg p-4'
                      >
                        <div className='flex items-start justify-between mb-3'>
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-2">
                              <Badge variant="outline" className="text-xs">{discussion.category}</Badge>
                              <Badge variant="outline" className="text-xs">{discussion.difficulty}</Badge>
                            </div>
                            <h3 className='font-medium text-gray-900 dark:text-white mb-1'>
                              {discussion.question}
                            </h3>
                            <p className='text-sm text-gray-600 dark:text-gray-300'>
                              {discussion.content}
                            </p>
                          </div>
                          <div className="flex flex-col space-y-2 ml-4">
                            <Button 
                              size="sm"
                              onClick={() => handleSolveProblem(discussion.problemId)}
                            >
                              <Zap className="w-4 h-4 mr-2" />
                              Î¨∏Ï†ú ÌíÄÍ∏∞
                            </Button>
                            <Button 
                              variant="outline"
                              size="sm"
                              onClick={() => handleViewOtherSolutions(discussion.problemId)}
                            >
                              Îã§Î•∏ ÌíÄÏù¥ Î≥¥Í∏∞
                            </Button>
                          </div>
                        </div>

                        <div className='flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-3'>
                          <span>
                            {discussion.author} ‚Ä¢ {discussion.time}
                          </span>
                          <div className='flex items-center space-x-4'>
                            <button className='flex items-center space-x-1 hover:text-green-600'>
                              <ThumbsUp className='w-4 h-4' />
                              <span>{discussion.likes}</span>
                            </button>
                            <button className='flex items-center space-x-1 hover:text-red-600'>
                              <ThumbsDown className='w-4 h-4' />
                              <span>{discussion.dislikes}</span>
                            </button>
                          </div>
                        </div>

                        <div className='space-y-3'>
                          {discussion.comments.map((comment, commentIndex) => (
                            <div
                              key={commentIndex}
                              className='bg-gray-50 dark:bg-slate-700 p-3 rounded-lg ml-4'
                            >
                              <p className='text-sm text-gray-800 dark:text-gray-200'>
                                {comment.content}
                              </p>
                              <p className='text-xs text-gray-500 dark:text-gray-400 mt-1'>
                                {comment.author} ‚Ä¢ {comment.time}
                              </p>
                            </div>
                          ))}

                          <div className='flex space-x-2 ml-4'>
                            <Input
                              placeholder='ÎåìÍ∏ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...'
                              value={newComment}
                              onChange={(e) => setNewComment(e.target.value)}
                              className='flex-1 text-sm'
                            />
                            <Button
                              size='sm'
                              onClick={() => handleCommentSubmit(discussion.id)}
                            >
                              <Send className='w-4 h-4' />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value='study' className='space-y-6'>
              <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between mb-6 space-y-4 sm:space-y-0">
                <h2 className="text-xl sm:text-2xl font-semibold dark:text-white">Ïä§ÌÑ∞Îîî Í∑∏Î£π</h2>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button className="bg-indigo-600 hover:bg-indigo-700">
                      <Plus className="w-4 h-4 mr-2" />
                      Í∑∏Î£π ÎßåÎì§Í∏∞
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="dark:bg-slate-800">
                    <DialogHeader>
                      <DialogTitle className="dark:text-white">ÏÉà Ïä§ÌÑ∞Îîî Í∑∏Î£π ÎßåÎì§Í∏∞</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Input placeholder="Í∑∏Î£π Ïù¥Î¶Ñ" />
                      <Input placeholder="Ï£ºÍ∞Ñ Î™©Ìëú (Î¨∏Ï†ú Ïàò)" type="number" />
                      <Button className="w-full">Í∑∏Î£π ÏÉùÏÑ±</Button>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <Card className="border-0 shadow-lg dark:bg-slate-800">
                  <CardHeader>
                    <CardTitle className="flex items-center dark:text-white">
                      <Trophy className="w-5 h-5 mr-2 text-yellow-500" />
                      ÎÇ¥ Ïä§ÌÑ∞Îîî Í∑∏Î£π
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {myGroups.length > 0 ? myGroups.map((group) => (
                      <div key={group.id} className="p-4 border border-gray-200 dark:border-slate-600 rounded-lg">
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-3">
                            <div className="text-2xl">{group.badge}</div>
                            <div>
                              <h3 className="font-semibold text-gray-900 dark:text-white">{group.name}</h3>
                              <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                                <Users className="w-4 h-4" />
                                <span>{group.members}Î™Ö</span>
                                <Badge variant="outline">{group.category}</Badge>
                              </div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-lg font-bold text-indigo-600">#{group.rank}</div>
                            <div className="text-xs text-gray-500 dark:text-gray-400">ÎÇ¥ ÏàúÏúÑ</div>
                          </div>
                        </div>
                        
                        <div className="space-y-2">
                          <div className="flex justify-between text-sm">
                            <span className="dark:text-gray-300">Ï£ºÍ∞Ñ ÏßÑÌñâÎ•† ({group.myProgress}/{group.weeklyGoal})</span>
                            <span className="dark:text-gray-300">{Math.round((group.myProgress / group.weeklyGoal) * 100)}%</span>
                          </div>
                          <Progress value={(group.myProgress / group.weeklyGoal) * 100} className="h-2" />
                        </div>
                      </div>
                    )) : (
                      <div className="text-center py-8">
                        <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500 dark:text-gray-400">Ï∞∏Ïó¨ Ï§ëÏù∏ Ïä§ÌÑ∞Îîî Í∑∏Î£πÏù¥ ÏóÜÏäµÎãàÎã§</p>
                        <p className="text-sm text-gray-400 dark:text-gray-500">ÏÉàÎ°úÏö¥ Í∑∏Î£πÏùÑ ÎßåÎì§Í±∞ÎÇò Í∏∞Ï°¥ Í∑∏Î£πÏóê Ï∞∏Ïó¨Ìï¥Î≥¥ÏÑ∏Ïöî</p>
                      </div>
                    )}
                  </CardContent>
                </Card>

                <Card className="border-0 shadow-lg dark:bg-slate-800">
                  <CardHeader>
                    <CardTitle className="dark:text-white">Ï∞∏Ïó¨ Í∞ÄÎä•Ìïú Í∑∏Î£π</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {availableGroups.map((group) => (
                      <div key={group.id} className="p-4 border border-gray-200 dark:border-slate-600 rounded-lg">
                        <div className="flex items-center justify-between">
                          <div>
                            <div className="flex items-center space-x-2 mb-2">
                              <h3 className="font-semibold text-gray-900 dark:text-white">{group.name}</h3>
                              {group.isPrivate && <Badge variant="secondary">ÎπÑÍ≥µÍ∞ú</Badge>}
                            </div>
                            <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                              <div className="flex items-center">
                                <Users className="w-4 h-4 mr-1" />
                                {group.members}Î™Ö
                              </div>
                              <div className="flex items-center">
                                <Target className="w-4 h-4 mr-1" />
                                Ï£ºÍ∞Ñ {group.weeklyGoal}Î¨∏Ï†ú
                              </div>
                            </div>
                          </div>
                          <Button size="sm">
                            {group.isPrivate ? 'Ïã†Ï≤≠ÌïòÍ∏∞' : 'Ï∞∏Ïó¨ÌïòÍ∏∞'}
                          </Button>
                        </div>
                      </div>
                    ))}
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value='live-competition' className='space-y-6'>
              <Card className="border-0 shadow-lg dark:bg-slate-800">
                <CardHeader>
                  <CardTitle className="flex items-center dark:text-white">
                    <Activity className="w-5 h-5 mr-2 text-red-500" />
                    Ïã§ÏãúÍ∞Ñ Ïä§ÌÑ∞Îîî Í∑∏Î£π Í≤ΩÏüÅ
                  </CardTitle>
                  <p className="text-sm text-gray-600 dark:text-gray-300">ÏßÄÍ∏à Ïù¥ ÏàúÍ∞Ñ Í∞ÄÏû• ÌôúÎ∞úÌïú Í∑∏Î£πÎì§</p>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {liveCompetition.map((group, index) => (
                      <div key={index} className="flex items-center justify-between p-4 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-slate-700 dark:to-slate-600 rounded-lg">
                        <div className="flex items-center space-x-4">
                          <div className="text-2xl">{group.badge}</div>
                          <div>
                            <div className="font-semibold text-gray-900 dark:text-white">{group.name}</div>
                            <div className="text-sm text-gray-500 dark:text-gray-400">{group.members}Î™Ö ÌôúÎèô Ï§ë</div>
                          </div>
                          <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                            <TrendingUp className="w-3 h-3 mr-1" />
                            {group.trend}
                          </Badge>
                        </div>
                        <div className="text-right">
                          <div className="text-xl font-bold text-indigo-600">{group.score.toLocaleString()}</div>
                          <div className="text-xs text-gray-500 dark:text-gray-400">Ïã§ÏãúÍ∞Ñ Ï†êÏàò</div>
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value='ranking' className='space-y-6'>
              <div className='grid grid-cols-1 md:grid-cols-2 gap-6'>
                <Card className='border-0 shadow-sm dark:bg-slate-800'>
                  <CardHeader>
                    <CardTitle className='flex items-center dark:text-white'>
                      <Trophy className='w-5 h-5 mr-2 text-yellow-500' />
                      Ïù¥Î≤à Ï£º TOP ÏÇ¨Ïö©Ïûê
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className='space-y-4'>
                      {personalRanking.map((user) => (
                        <div
                          key={user.rank}
                          className={`flex items-center justify-between p-3 rounded-lg ${
                            user.name === 'ÎÇò' ? 'bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800' : 'bg-gray-50 dark:bg-slate-700'
                          }`}
                        >
                          <div className='flex items-center space-x-3'>
                            <div
                              className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-bold ${
                                user.rank === 1
                                  ? "bg-yellow-500"
                                  : user.rank === 2
                                  ? "bg-gray-400"
                                  : "bg-amber-600"
                              }`}
                            >
                              {user.rank}
                            </div>
                            <div>
                              <div className="flex items-center space-x-2">
                                <p className='font-medium dark:text-white'>{user.name}</p>
                                <Badge variant="outline" className="text-xs">{user.level}</Badge>
                              </div>
                              <p className='text-sm text-gray-500 dark:text-gray-400'>
                                {user.problems}Î¨∏Ï†ú Ìï¥Í≤∞
                              </p>
                            </div>
                          </div>
                          <div className='text-right'>
                            <p className='font-bold text-blue-600'>
                              {user.score.toLocaleString()}
                            </p>
                            <p className='text-xs text-gray-500 dark:text-gray-400'>Ï†êÏàò</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card className='border-0 shadow-sm dark:bg-slate-800'>
                  <CardHeader>
                    <CardTitle className='flex items-center dark:text-white'>
                      <Calendar className='w-5 h-5 mr-2 text-green-500' />
                      Ïò§ÎäòÏùò ÌôúÎèô
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className='space-y-4'>
                      <div className='text-center'>
                        <div className='text-3xl font-bold text-green-600'>
                          1,234
                        </div>
                        <p className='text-sm text-gray-500 dark:text-gray-400'>
                          Î™ÖÏù¥ Ïò§Îäò Î¨∏Ï†úÎ•º ÌíÄÏóàÏñ¥Ïöî
                        </p>
                      </div>
                      <div className='grid grid-cols-2 gap-4 text-center'>
                        <div>
                          <div className='text-xl font-bold text-blue-600'>
                            567
                          </div>
                          <p className='text-xs text-gray-500 dark:text-gray-400'>ÏÉàÎ°úÏö¥ Í∏∞Î°ù</p>
                        </div>
                        <div>
                          <div className='text-xl font-bold text-purple-600'>
                            89
                          </div>
                          <p className='text-xs text-gray-500 dark:text-gray-400'>ÏôÑÎ≤ΩÌïú Ï†êÏàò</p>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>

            <TabsContent value='wrong-answers' className='space-y-6'>
              <Card className='border-0 shadow-sm dark:bg-slate-800'>
                <CardHeader>
                  <CardTitle className='flex items-center dark:text-white'>
                    <TrendingUp className='w-5 h-5 mr-2 text-red-500' />
                    ÎßéÏù¥ ÌãÄÎ¶∞ Î¨∏Ï†úÎì§
                  </CardTitle>
                  <p className='text-sm text-gray-600 dark:text-gray-300'>
                    Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎì§Ïù¥ Ïñ¥Î†§ÏõåÌïòÎäî Î¨∏Ï†úÎ•º ÎØ∏Î¶¨ Ïó∞ÏäµÌï¥Î≥¥ÏÑ∏Ïöî
                  </p>
                </CardHeader>
                <CardContent>
                  <div className='space-y-4'>
                    {[
                      {
                        question: "JavaScript ÌÅ¥Î°úÏ†ÄÎûÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?",
                        category: "JavaScript",
                        difficulty: "Î≥¥ÌÜµ",
                        wrongRate: 73,
                        myScore: 2.5,
                      },
                      {
                        question: "ÌîÑÎ°úÏÑ∏Ïä§ÏôÄ Ïä§Î†àÎìúÏùò Ï∞®Ïù¥Ï†ê",
                        category: "Ïö¥ÏòÅÏ≤¥Ï†ú",
                        difficulty: "Ïñ¥Î†§ÏõÄ",
                        wrongRate: 68,
                        myScore: null,
                      }
                    ].map((item, index) => (
                      <div
                        key={index}
                        className='flex items-center justify-between p-4 bg-gray-50 dark:bg-slate-700 rounded-lg hover:bg-gray-100 dark:hover:bg-slate-600 transition-colors'
                      >
                        <div className='flex-1'>
                          <h3 className='font-medium text-gray-900 dark:text-white mb-1'>
                            {item.question}
                          </h3>
                          <div className='flex items-center space-x-3 text-sm text-gray-500 dark:text-gray-400'>
                            <Badge variant='outline'>{item.category}</Badge>
                            <Badge variant='outline'>{item.difficulty}</Badge>
                            <span className='text-red-600 font-medium'>
                              Ïò§ÎãµÎ•† {item.wrongRate}%
                            </span>
                          </div>
                        </div>
                        <div className='text-right ml-4'>
                          {item.myScore ? (
                            <div>
                              <div className="flex items-center justify-end mb-1">
                                {Array.from({ length: 5 }, (_, i) => (
                                  <Star
                                    key={i}
                                    className={`w-3 h-3 ${
                                      i < Math.floor(item.myScore)
                                        ? 'text-yellow-400 fill-current'
                                        : i < item.myScore
                                        ? 'text-yellow-400 fill-current opacity-50'
                                        : 'text-gray-300'
                                    }`}
                                  />
                                ))}
                              </div>
                              <div className='text-xs text-gray-500 dark:text-gray-400'>ÎÇ¥ Ï†êÏàò</div>
                            </div>
                          ) : (
                            <Button size='sm'>ÎèÑÏ†ÑÌïòÍ∏∞</Button>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
    </div>
  );
};

export default CommunityTab;
